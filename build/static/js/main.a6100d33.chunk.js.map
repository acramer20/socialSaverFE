{"version":3,"sources":["hooks/useLocalStorage.js","forms/UserContext.js","routes-nav/Navigation.js","homepage/Homepage.js","shared/SearchForm.js","api/api.js","companies/CompanyCard.js","shared/LoadingSpinner.js","companies/CompanyList.js","jobs/JobCard.js","jobs/JobCardList.js","jobs/JobList.js","companies/CompanyDetail.js","shared/Alert.js","forms/LoginForm.js","profiles/ProfileForm.js","forms/SignupForm.js","routes-nav/PrivateRoute.js","routes-nav/Routes.js","App.js","serviceWorker.js","index.js"],"names":["useLocalStorage","key","firstValue","initialValue","localStorage","getItem","useState","item","setItem","useEffect","console","debug","removeItem","UserContext","React","createContext","Navigation","logout","currentUser","useContext","className","to","onClick","first_name","username","Homepage","firstName","SearchForm","searchFor","searchTerm","setSearchTerm","onSubmit","evt","preventDefault","trim","undefined","name","placeholder","value","onChange","target","type","JoblyApi","endpoint","data","method","url","process","headers","Authorization","token","params","axios","error","response","message","Array","isArray","handle","this","request","res","company","companies","user","jobTitle","jobs","id","CompanyCard","description","logoUrl","src","alt","LoadingSpinner","CompanyList","setCompanies","search","getCompanies","length","map","c","JobCard","title","salary","equity","companyName","hasAppliedToJob","applyToJob","applied","setApplied","digitsRev","salaryStr","toString","i","push","reverse","join","formatSalary","disabled","JobCardList","apply","job","JobList","setJobs","getJobs","CompanyDetail","useParams","setCompany","getCompany","Alert","messages","role","LoginForm","login","history","useHistory","password","formInputs","setFormInputs","formErrors","setFormErrors","handleSubmit","e","result","success","errors","handleChange","l","autoComplete","required","ProfileForm","setCurrentUser","lastName","email","saveConfirmed","setSaveConfirmed","profileData","saveProfile","updatedUser","f","SignupForm","signup","PrivateRoute","exact","path","children","Routes","register","App","infoLoaded","setInfoLoaded","Set","applicationIds","setApplicationIds","setToken","signupData","loginData","has","jwt","decode","getCurrentUser","applications","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a6100d33.chunk.js","sourcesContent":["import { useState, useEffect } from \"react\";\n/** This is supposed to keep the state up to date with local storage. --- could use some more time to go over this with Peter. */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n","import React from \"react\";\n\n/** Context: provides currentUser object and setter for it throughout app. */\n\nconst UserContext = React.createContext();\n\nexport default UserContext;\n","import React, { useContext } from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport UserContext from \"../forms/UserContext\";\nimport \"./Navigation.css\";\n\n/** Nav bar to show up on everypage for user's convenienve*/\n\nfunction Navigation({ logout }) {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Navigation\", \"currentUser=\", currentUser);\n\n  function loggedInNav() {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/profile\">\n              Profile\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/jobs\">\n              Jobs\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/companies\">\n              Companies\n            </NavLink>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/\" onClick={logout}>\n              Log out {currentUser.first_name || currentUser.username}\n            </Link>\n          </li>\n        </ul>\n    );\n  }\n\n  function loggedOutNav() {\n    return (\n        <ul className=\"navbar-nav ml-auto\">\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/login\">\n              Login\n            </NavLink>\n          </li>\n          <li className=\"nav-item mr-4\">\n            <NavLink className=\"nav-link\" to=\"/signup\">\n              Sign Up\n            </NavLink>\n          </li>\n        </ul>\n    );\n  }\n\n  return (\n      <nav className=\"Navigation navbar navbar-expand-md\">\n        <Link className=\"navbar-brand home-title\" to=\"/\">\n          Jobly\n        </Link>\n        {currentUser ? loggedInNav() : loggedOutNav()}\n      </nav>\n  );\n}\n\nexport default Navigation;\n","import React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Homepage.css\";\nimport UserContext from \"../forms/UserContext\";\n\n/** Homepage of Jobly with a cute little welcome message\n */\n\nfunction Homepage() {\n  const { currentUser } = useContext(UserContext);\n  console.debug(\"Homepage\", \"currentUser=\", currentUser);\n\n  return (\n      <div className=\"Homepage\">\n        <div className=\"container text-center\">\n          <h1 className=\"mb-8 font-weight-bold\">Jobly</h1>\n          <p className=\"lead home-para\">All the jobs in one, silly little place.</p>\n          {currentUser\n              ? <h2>\n                Welcome Back, {currentUser.firstName || currentUser.username}!\n              </h2>\n              : (\n                  <p>\n                    <Link className=\"btn btn-primary font-weight-bold mr-3\"\n                          to=\"/login\">\n                      Log in\n                    </Link>\n                    <Link className=\"btn btn-primary font-weight-bold\"\n                          to=\"/signup\">\n                      Sign up\n                    </Link>\n                  </p>\n              )}\n        </div>\n      </div>\n  );\n}\n\nexport default Homepage;\n","import React, { useState } from \"react\";\nimport \"./SearchForm.css\";\n\n/** Search bar for searching through both the company and job pages. \n */\n\nfunction SearchForm({ searchFor }) {\n  console.debug(\"SearchForm\", \"searchFor=\", typeof searchFor);\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  /** Tell parent to filter  --- noozhna uznat nemnozhka bolshe ob etom*/\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    searchFor(searchTerm.trim() || undefined);\n    setSearchTerm(searchTerm.trim());\n  }\n\n  /** Update form fields */\n  function handleChange(evt) {\n    setSearchTerm(evt.target.value);\n  }\n\n  return (\n      <div className=\"SearchForm mb-4\">\n        <form className=\"form-inline\" onSubmit={handleSubmit}>\n          <input\n              className=\"form-control form-control-lg flex-grow-1\"\n              name=\"searchTerm\"\n              placeholder=\"Enter search term..\"\n              value={searchTerm}\n              onChange={handleChange}\n          />\n          <button type=\"submit\" className=\"btn btn-lg btn-secondary\">\n            Submit\n          </button>\n        </form>\n      </div>\n  );\n}\n\nexport default SearchForm;\n","import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *F\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = (method === \"get\")\n        ? data\n        : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  /** Get details on a company by handle. */\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  /** Getting the companies and using name to filter them if left undef. */\n  static async getCompanies(name) {\n    let res = await this.request(`companies`, {name});\n    return res.companies;\n  }\n\n  /** get the current user */\n\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  /** getting the list of jobs */\n\n  static async getJobs(jobTitle){\n    let res = await this.request(\"jobs\", { jobTitle });\n    return res.jobs;\n  }\n\n  /** now applying to the jobs -- post request */\n\n  static async applyToJob(username, id){\n    await this.request(`users/${username}/jobs/${id}`, {}, \"post\");\n  }\n\n  /**Signing up for site */\n  static async signup(data){\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n\n  /** getting login token --- post request */\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  /** Editing profile page */\n\n  static async saveProfile(username, data){\n    let res = await this.request(`users/${username}`, data, \"patch\")\n    return res.user;\n  }\n\n\n\n\n\n  // obviously, you'll add a lot here ...\n}\n\nexport default JoblyApi;\n// for now, put token (\"testuser\" / \"password\" on class)\n// JoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n//     \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n//     \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport \"./CompanyCard.css\";\n\n/** Show basic information about company and renders the company info in a card format\n */\n\nfunction CompanyCard({ name, description, logoUrl, handle }) {\n  console.debug(\"CompanyCard\", logoUrl);\n\n  return (\n      <Link className=\"CompanyCard card\" to={`/companies/${handle}`}>\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">\n            {name}\n            {logoUrl && <img src={logoUrl}\n                             alt={name}\n                             className=\"float-right ml-5\" />}\n          </h6>\n          <p><small>{description}</small></p>\n        </div>\n      </Link>\n  );\n}\n\nexport default CompanyCard;\n","import React from \"react\";\nimport \"./LoadingSpinner.css\";\n\n/** Loading message */\n\nfunction LoadingSpinner() {\n  return (\n      <div className=\"LoadingSpinner\">\n        Loading ...\n      </div>\n  );\n}\n\nexport default LoadingSpinner;","import React, { useState, useEffect } from \"react\";\nimport SearchForm from \"../shared/SearchForm\";\nimport JoblyApi from \"../api/api\";\nimport CompanyCard from \"./CompanyCard\";\nimport LoadingSpinner from \"../shared/LoadingSpinner\";\n\n/** uses api to load a list of companies and display them in their individual cards\n */\n\nfunction CompanyList() {\n  console.debug(\"CompanyList\");\n\n  const [companies, setCompanies] = useState(null);\n\n  useEffect(function getCompaniesOnMount() {\n    console.debug(\"CompanyList useEffect getCompaniesOnMount\");\n    search();\n  }, []);\n\n  /** On submit this is used to reload the searched companies. */\n  async function search(name) {\n    let companies = await JoblyApi.getCompanies(name);\n    setCompanies(companies);\n  }\n\n  if (!companies) return <LoadingSpinner />;\n\n  return (\n      <div className=\"CompanyList col-md-8 offset-md-2\">\n        <SearchForm searchFor={search} />\n        {companies.length\n            ? (\n                <div className=\"CompanyList-list\">\n                  {companies.map(c => (\n                      <CompanyCard\n                          key={c.handle}\n                          handle={c.handle}\n                          name={c.name}\n                          description={c.description}\n                          logoUrl={c.logoUrl}\n                      />\n                  ))}\n                </div>\n            ) : (\n                <p className=\"lead\">Sorry boo boo, no results here for you you.</p>\n            )}\n      </div>\n  );\n}\n\nexport default CompanyList;\n","import React, { useContext, useState } from \"react\";\nimport \"./JobCard.css\";\nimport UserContext from \"../forms/UserContext\";\n\n/** Show the basic information about a job.\n *\n * uses JobCardList to show a card for each job.\n */\n\nfunction JobCard({ id, title, salary, equity, companyName }) {\n  console.debug(\"JobCard\");\n\n  const { hasAppliedToJob, applyToJob } = useContext(UserContext);\n  const [applied, setApplied] = useState();\n\n  React.useEffect(function updateAppliedStatus() {\n    console.debug(\"JobCard useEffect updateAppliedStatus\", \"id=\", id);\n\n    setApplied(hasAppliedToJob(id));\n  }, [id, hasAppliedToJob]);\n\n  /** Apply for a job */\n  async function handleApply(evt) {\n    if (hasAppliedToJob(id)) return;\n    applyToJob(id);\n    setApplied(true);\n  }\n\n  return (\n      <div className=\"JobCard card\"> {applied}\n        <div className=\"card-body\">\n          <h6 className=\"card-title\">{title}</h6>\n          <p>{companyName}</p>\n          {salary && <div><small>Salary: {formatSalary(salary)}</small></div>}\n          {equity !== undefined && <div><small>Equity: {equity}</small></div>}\n          <button\n              className=\"btn btn-warning font-weight-bold float-right text-uppercase\"\n              onClick={handleApply}\n              disabled={applied}\n          >\n            {applied ? \"Applied\" : \"Apply\"}\n          </button>\n        </div>\n      </div>\n  );\n}\n\n/** Shows the salary in a more readable way */\n\nfunction formatSalary(salary) {\n  const digitsRev = [];\n  const salaryStr = salary.toString();\n\n  for (let i = salaryStr.length - 1; i >= 0; i--) {\n    digitsRev.push(salaryStr[i]);\n    if (i > 0 && i % 3 === 0) digitsRev.push(\",\");\n  }\n\n  return digitsRev.reverse().join(\"\");\n}\n\n\nexport default JobCard;\n","import React from \"react\";\nimport JobCard from \"./JobCard\";\n\n/** Show list of job cards - JobList and CompanyDetail use this and the user can send an application by simply hitting the apply button\n *\n * JobList -> JobCardList -> JobCard\n * CompanyDetail -> JobCardList -> JobCard\n *\n */\n\nfunction JobCardList({ jobs, apply }) {\n  console.debug(\"JobCardList\", \"jobs=\", jobs);\n\n  return (\n      <div className=\"JobCardList\">\n        {jobs.map(job => (\n            <JobCard\n                key={job.id}\n                id={job.id}\n                title={job.title}\n                salary={job.salary}\n                equity={job.equity}\n                companyName={job.companyName}\n            />\n        ))}\n      </div>\n  );\n}\n\nexport default JobCardList;\n","import React, { useState, useEffect } from \"react\";\nimport Search from \"../shared/SearchForm\";\nimport JoblyApi from \"../api/api\";\nimport JobCardList from \"./JobCardList\";\nimport LoadingSpinner from \"../shared/LoadingSpinner\";\n\n/** Shows list of jobs\n * JobList -> JobCardList -> JobCard\n */\n\nfunction JobList() {\n  console.debug(\"JobList\");\n\n  const [jobs, setJobs] = useState(null);\n\n  useEffect(function getAllJobsOnMount() {\n    console.debug(\"JobList useEffect getAllJobsOnMount\");\n    search();\n  }, []);\n\n  /** With each search on submit, this is reloaded */\n  async function search(title) {\n    let jobs = await JoblyApi.getJobs(title);\n    setJobs(jobs);\n  }\n\n  if (!jobs) return <LoadingSpinner />;\n\n  return (\n      <div className=\"JobList col-md-8 offset-md-2\">\n        <Search searchFor={search} />\n        {jobs.length\n            ? <JobCardList jobs={jobs} />\n            : <p className=\"lead\">Sorry, no results were found!</p>\n        }\n      </div>\n  );\n}\n\nexport default JobList;\n","import React, { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport JoblyApi from \"../api/api\";\nimport JobCardList from \"../jobs/JobCardList\";\nimport LoadingSpinner from \"../shared/LoadingSpinner\";\n\n/** Company Detail page. Gives info on the company and the jobs it has available.\n */\n\nfunction CompanyDetail() {\n  const { handle } = useParams();\n  console.debug(\"CompanyDetail\", \"handle=\", handle);\n\n  const [company, setCompany] = useState(null);\n\n  useEffect(function getCompanyAndJobsForUser() {\n    async function getCompany() {\n      setCompany(await JoblyApi.getCompany(handle));\n    }\n\n    getCompany();\n  }, [handle]);\n\n  if (!company) return <LoadingSpinner />;\n\n  return (\n      <div className=\"CompanyDetail col-md-8 offset-md-2\">\n        <h4>{company.name}</h4>\n        <p>{company.description}</p>\n        <JobCardList jobs={company.jobs} />\n      </div>\n  );\n}\n\nexport default CompanyDetail;\n","import React from \"react\";\n\n/** Presentational component for showing bootstrap-style alerts.\n *\n * { LoginForm, SignupForm, ProfileForm } -> Alert\n **/\n\nfunction Alert({ type = \"danger\", messages = [] }) {\n  console.debug(\"Alert\", \"type=\", type, \"messages=\", messages);\n\n  return (\n      <div className={`alert alert-${type}`} role=\"alert\">\n        {messages.map(error => (\n            <p className=\"mb-0 small\" key={error}>\n              {error}\n            </p>\n        ))}\n      </div>\n  );\n}\n\nexport default Alert;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../shared/Alert\";\n\n/** Login form \n * Populates the form asking for username and password. \n * On submission - \n * calls the login function that is provided as a prop from api.js\n * if correctly inputed, it redirects the user to the /companies route\n * \n * route is /login\n */\n\nfunction LoginForm({ login }) {\n  const history = useHistory();\n  const [formInputs, setFormInputs] = useState({ username: \"\", password: \"\", });\n  const [formErrors, setFormErrors] = useState([]);\n\n\n  console.debug(\n      \"LoginForm\",\n      \"login=\", typeof login,\n      \"formInputs=\", formInputs,\n      \"formErrors\", formErrors,\n  );\n\n  /** Handle form submit:\n   * uses the login function and then redirects to /companies when the user is successfully logged in.\n   */\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let result = await login(formInputs);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update the form data field */\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setFormInputs(l => ({ ...l, [name]: value }));\n  }\n\n  return (\n      <div className=\"LoginForm\">\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h3 className=\"offset-lg-5 mb-2\">Log In</h3>\n\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control form-control-lg\"\n                      value={formInputs.username}\n                      onChange={handleChange}\n                      autoComplete=\"username\"\n                      required\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control form-control-lg\"\n                      value={formInputs.password}\n                      onChange={handleChange}\n                      autoComplete=\"current-password\"\n                      required\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null}\n\n                <button\n                    className=\"btn btn-outline-secondary btn-block\"\n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default LoginForm;\n","import React, { useState, useContext } from \"react\";\nimport Alert from \"../shared/Alert\";\nimport JoblyApi from \"../api/api\";\nimport UserContext from \"../forms/UserContext\";\n\n// eslint-disable-next-line\nimport useTimedMessage from \"../hooks/useTimedMessage\";\n\n/** Edit the profile through the profile form at /profile. Shows a form that allows for you to change the information of a user\n */\n\nfunction ProfileForm() {\n  const { currentUser, setCurrentUser } = useContext(UserContext);\n  const [formInputs, setFormInputs] = useState({\n    firstName: currentUser.firstName,\n    lastName: currentUser.lastName,\n    email: currentUser.email,\n    username: currentUser.username,\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  \n  const [saveConfirmed, setSaveConfirmed] = useState(false);\n\n  console.debug(\n      \"ProfileForm\",\n      \"currentUser=\", currentUser,\n      \"formInputs=\", formInputs,\n      \"formErrors=\", formErrors,\n      \"saveConfirmed=\", saveConfirmed,\n  );\n\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n\n    let profileData = {\n      firstName: formInputs.firstName,\n      lastName: formInputs.lastName,\n      email: formInputs.email,\n      password: formInputs.password,\n    };\n\n    let username = formInputs.username;\n    let updatedUser;\n\n    try {\n      updatedUser = await JoblyApi.saveProfile(username, profileData);\n    } catch (errors) {\n      debugger;\n      setFormErrors(errors);\n      return;\n    }\n\n    setFormInputs(f => ({ ...f, password: \"\" }));\n    setFormErrors([]);\n    setSaveConfirmed(true);\n\n    // onsubmit reloads user information to new and updated\n    setCurrentUser(updatedUser);\n  }\n\n  /** Handles when the form data changes */\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setFormInputs(f => ({\n      ...f,\n      [name]: value,\n    }));\n    setFormErrors([]);\n  }\n\n  return (\n      <div className=\"col-md-6 col-lg-4 offset-md-3 offset-lg-4\">\n        <h3>Profile</h3>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <form>\n              <div className=\"form-group\">\n                <label>Username</label>\n                <p className=\"form-control-plaintext\">{formInputs.username}</p>\n              </div>\n              <div className=\"form-group\">\n                <label>First Name</label>\n                <input\n                    name=\"firstName\"\n                    className=\"form-control form-control-lg\"\n                    value={formInputs.firstName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Last Name</label>\n                <input\n                    name=\"lastName\"\n                    className=\"form-control form-control-lg\"\n                    value={formInputs.lastName}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Email</label>\n                <input\n                    name=\"email\"\n                    className=\"form-control form-control-lg\"\n                    value={formInputs.email}\n                    onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group\">\n                <label>Confirm password to make changes:</label>\n                <input\n                    type=\"password\"\n                    name=\"password\"\n                    className=\"form-control form-control-lg\"\n                    value={formInputs.password}\n                    onChange={handleChange}\n                />\n              </div>\n\n              {formErrors.length\n                  ? <Alert type=\"danger\" messages={formErrors} />\n                  : null}\n\n              {saveConfirmed\n                  ?\n                  <Alert type=\"success\" messages={[\"Updated successfully.\"]} />\n                  : null}\n\n              <button\n                  className=\"btn btn-outline-primary btn-block mt-4\"\n                  onClick={handleSubmit}\n              >\n                Save Changes\n              </button>\n            </form>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default ProfileForm;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Alert from \"../shared/Alert\";\n\n/** Signup form. \n * This populates a form for users to use to sign up. It will redirect to the companies route as well once the signup function has been called\n */\n\nfunction SignupForm({ signup }) {\n  const history = useHistory();\n  const [formInputs, setFormInputs] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"SignupForm\",\n      \"signup=\", typeof signup,\n      \"formInputs=\", formInputs,\n      \"formErrors=\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(e) {\n    e.preventDefault();\n    let result = await signup(formInputs);\n    if (result.success) {\n      history.push(\"/companies\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(e) {\n    const { name, value } = e.target;\n    setFormInputs(data => ({ ...data, [name]: value }));\n  }\n\n  return (\n      <div className=\"SignupForm\">\n        <div className=\"container col-md-6 offset-md-3 col-lg-4 offset-lg-4\">\n          <h2 className=\"mb-2\">Sign Up</h2>\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                  <label>Username</label>\n                  <input\n                      name=\"username\"\n                      className=\"form-control form-control-lg\"\n                      value={formInputs.username}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Password</label>\n                  <input\n                      type=\"password\"\n                      name=\"password\"\n                      className=\"form-control form-control-lg\"\n                      value={formInputs.password}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label>First name</label>\n                  <input\n                      name=\"firstName\"\n                      className=\"form-control form-control-lg\"\n                      value={formInputs.firstName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Last name</label>\n                  <input\n                      name=\"lastName\"\n                      className=\"form-control form-control-lg\"\n                      value={formInputs.lastName}\n                      onChange={handleChange}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label>Email</label>\n                  <input\n                      type=\"email\"\n                      name=\"email\"\n                      className=\"form-control form-control-lg\"\n                      value={formInputs.email}\n                      onChange={handleChange}\n                  />\n                </div>\n\n                {formErrors.length\n                    ? <Alert type=\"danger\" messages={formErrors} />\n                    : null\n                }\n\n                <button\n                    type=\"submit\"\n                    className=\"btn btn-outline-secondary btn-block\"\n                    onSubmit={handleSubmit}\n                >\n                  Submit\n                </button>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default SignupForm;","import React, { useContext } from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport UserContext from \"../forms/UserContext\";\n\n/** \"Higher-Order Component\" for private routes to check if there is a current user... otherwise, they cannot view the certain routes.\n */\n\nfunction PrivateRoute({ exact, path, children }) {\n  const { currentUser } = useContext(UserContext);\n\n  console.debug(\n      \"PrivateRoute\",\n      \"exact=\", exact,\n      \"path=\", path,\n      \"currentUser=\", currentUser,\n  );\n\n  if (!currentUser) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return (\n      <Route exact={exact} path={path}>\n        {children}\n      </Route>\n  );\n}\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport Homepage from \"../homepage/Homepage\";\nimport CompanyList from \"../companies/CompanyList\";\nimport JobList from \"../jobs/JobList\";\nimport CompanyDetail from \"../companies/CompanyDetail\";\nimport LoginForm from \"../forms/LoginForm\";\nimport ProfileForm from \"../profiles/ProfileForm\";\nimport SignupForm from \"../forms/SignupForm\";\nimport PrivateRoute from \"./PrivateRoute\";\n\n/** Sitewide routes. PArts of site should only be visible when the user is logged in or has just signed up. \n */\n\nfunction Routes({ login, signup }) {\n  console.debug(\n      \"Routes\",\n      `login=${typeof login}`,\n      `register=${typeof register}`,\n  );\n\n  return (\n      <div className=\"pt-5\">\n        <Switch>\n\n          <Route exact path=\"/\">\n            <Homepage />\n          </Route>\n\n          <Route exact path=\"/login\">\n            <LoginForm login={login} />\n          </Route>\n\n          <Route exact path=\"/signup\">\n            <SignupForm signup={signup} />\n          </Route>\n\n          <PrivateRoute exact path=\"/companies\">\n            <CompanyList />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/jobs\">\n            <JobList />\n          </PrivateRoute>\n\n          <PrivateRoute exact path=\"/companies/:handle\">\n            <CompanyDetail />\n          </PrivateRoute>\n\n          <PrivateRoute path=\"/profile\">\n            <ProfileForm />\n          </PrivateRoute>\n\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n  );\n}\n\nexport default Routes;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport Navigation from \"./routes-nav/Navigation\";\nimport Routes from \"./routes-nav/Routes\";\nimport LoadingSpinner from \"./shared/LoadingSpinner\";\nimport JoblyApi from \"./api/api\";\nimport UserContext from \"./forms/UserContext\";\nimport jwt from \"jsonwebtoken\";\n\n// Key name for storing token in localStorage for \"remember me\" re-login\nexport const TOKEN_STORAGE_ID = \"jobly-token\";\n\n/** Jobly application.\n *\n * - infoLoaded: has user data been pulled from API?\n *   (this manages spinner for \"loading...\")\n *\n * - currentUser: user obj from API. This becomes the canonical way to tell\n *   if someone is logged in. This is passed around via context throughout app.\n *\n * - token: for logged in users, this is their authentication JWT.\n *   Is required to be set for most API calls. This is initially read from\n *   localStorage and synced to there via the useLocalStorage hook.\n *\n * App -> Routes\n */\n\n\nfunction App() {\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [applicationIds, setApplicationIds] = useState(new Set([]));\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_STORAGE_ID);\n\n  console.debug(\n      \"App\",\n      \"infoLoaded=\", infoLoaded,\n      \"currentUser=\", currentUser,\n      \"token=\", token,\n  );\n\n  // Load user info from API. Until a user is logged in and they have a token,\n  // this should not run. It only needs to re-run when a user logs out, so\n  // the value of the token is a dependency for this effect.\n\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let { username } = jwt.decode(token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          setApplicationIds(new Set(currentUser.applications));\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setInfoLoaded(true);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setInfoLoaded(false);\n    getCurrentUser();\n  }, [token]);\n\n  /** Handles site-wide logout. */\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  /** Handles sign up\n   */\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Handles site-wide login.\n   *\n   * Make sure you await this function and check its return value!\n   */\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  /** Checks if a job has been applied for. */\n  function hasAppliedToJob(id) {\n    return applicationIds.has(id);\n  }\n\n  /** Apply to a job: make API call and update set of application IDs. */\n  function applyToJob(id) {\n    if (hasAppliedToJob(id)) return;\n    JoblyApi.applyToJob(currentUser.username, id);\n    setApplicationIds(new Set([...applicationIds, id]));\n  }\n\n  if (!infoLoaded) return <LoadingSpinner />;\n\n  return (\n      <BrowserRouter>\n        <UserContext.Provider\n            value={{ currentUser, setCurrentUser, hasAppliedToJob, applyToJob }}>\n          <div className=\"App\">\n            <Navigation logout={logout} />\n            <Routes login={login} signup={signup} />\n          </div>\n        </UserContext.Provider>\n      </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === \"installed\") {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    \"New content is available and will be used when all \" +\n                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log(\"Content is cached for offline use.\");\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error(\"Error during service worker registration:\", error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get(\"content-type\");\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf(\"javascript\") === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            \"No internet connection found. App is running in offline mode.\",\n        );\n      });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}